let votePageParser = (controlPanel) => {
  // —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
  let curSprint = controlPanel.getCurrentSprint();
  let parsedData = {
    alias: "vote",
    data: {
      title: "–°–∞–º—ã–π üîé –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
      subtitle: curSprint.name,
      emoji: "üîé",
      users: [],
    },
  };

  let users = controlPanel.getAllUsers();
  let usersLikesCount = controlPanel.countLikesToUsers(curSprint);
  for (let userId in usersLikesCount) {
    let x = { ...users[userId], valueText: usersLikesCount[userId] };
    parsedData.data.users.push(x);
  }
  // —Å–æ—Ä—Ç–∏—Ä—É–µ–º —é–∑–µ—Ä–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è —á–∏—Å–ª–∞ –ª–∞–π–∫–æ–≤ –∫ –∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º
  parsedData.data.users.sort((prev, cur) => cur.valueText - prev.valueText);
  parsedData.data.users = parsedData.data.users.map((user) => {
    let word = controlPanel.getNoun(user.valueText, "–≥–æ–ª–æ—Å", "–≥–æ–ª–æ—Å–∞", "–≥–æ–ª–æ—Å–æ–≤");
    return { ...user, valueText: `${user.valueText} ${word}` };
  });
  return parsedData;
};

module.exports = { votePageParser };
