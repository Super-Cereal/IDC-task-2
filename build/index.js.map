{"version":3,"sources":["activity.js","chart.js","diagram.js","leaders.js","vote.js","_controlPanel.js"],"names":["activityPageParser","controlPanel","sprint","commits","parsedData","alias","data","title","subtitle","getCurrentSprintId","mon","tue","wed","thu","fri","sat","sun","forEach","sinceWeekStart","commit","timestamp","startAt","day","Math","floor","hour","module","exports","chartPageParser","topUsers","commitsBySprintId","sprintId","users","values","i","push","value","length","active","getSprintById","getSprintCommits","diagramPageParser","totalText","differenceText","categories","valueText","countSizeOfCommitsOfSprint","summaries","getAllSummaries","res","size","summaryId","summary","id","added","removed","sum","array","reduce","prev","cur","lastSizes","curSizes","val","votePageParser","require","leadersPageParser","prepareData","entities","init","curSprint","curCommits","leadersData","chartData","slice","diagramData","activityData","emoji","userId","getAllUsers","usersCommits","countUsersCommits","x","sort","likesToUsersId","countLikesToCommentsByUsers","map","user","this","undefinedSprint","finishAt","_entities","User","Project","Sprint","Commit","Summary","Issue","Comment","entity","type","name","avatar","filter","usersCommitsCount","author","comments","likesToCommentsByUsers","comment","createdAt","likes"],"mappings":"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","file":"index.js","sourcesContent":["let activityPageParser = (controlPanel, sprint, commits) => {\r\n  // сформируем данные для страницы активности\r\n  let sprintId = controlPanel.getCurrentSprintId();\r\n  let parsedData = {\r\n    alias: \"activity\",\r\n    data: {\r\n      title: \"Коммиты, 1 неделя\",\r\n      subtitle: `Спринт № ${sprintId}`,\r\n      data: {\r\n        mon: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        tue: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        wed: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        thu: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        fri: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        sat: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        sun: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      },\r\n    },\r\n  };\r\n\r\n  let data = parsedData.data.data;\r\n  commits.forEach((commit) => {\r\n    let sinceWeekStart = commit.timestamp - sprint.startAt;\r\n    let day = Math.floor(sinceWeekStart / (24 * 60 * 60 * 1000));\r\n    let sinceDayStart = sinceWeekStart % (24 * 60 * 60 * 1000);\r\n    let hour = Math.floor(sinceDayStart / (60 * 60 * 1000));\r\n\r\n    if (day === 0) data.mon[hour]++;\r\n    if (day === 1) data.tue[hour]++;\r\n    if (day === 2) data.wed[hour]++;\r\n    if (day === 3) data.thu[hour]++;\r\n    if (day === 4) data.fri[hour]++;\r\n    if (day === 5) data.sat[hour]++;\r\n    if (day === 6) data.sun[hour]++;\r\n  });\r\n  return parsedData;\r\n};\r\n\r\nmodule.exports = { activityPageParser };\r\n","let chartPageParser = (controlPanel, topUsers, commits) => {\r\n  // сформируем данные для страницы диаграммы\r\n  let sprintId = controlPanel.getCurrentSprintId();\r\n  let parsedData = {\r\n    alias: \"chart\",\r\n    data: {\r\n      title: \"Коммиты\",\r\n      subtitle: `Спринт № ${sprintId}`,\r\n      users: topUsers,\r\n      values: [],\r\n    },\r\n  };\r\n\r\n  let values = parsedData.data.values;\r\n  for (let i = -6; i < 4; i++) {\r\n    if (i === 0)\r\n      values.push({ title: sprintId, value: commits.length, active: true });\r\n    else if (sprintId + i <= 0) continue;\r\n    else {\r\n      let sprint = controlPanel.getSprintById(sprintId + i);\r\n      let commitsBySprintId = controlPanel.getSprintCommits(sprint);\r\n      values.push({ title: sprintId + i, value: commitsBySprintId.length });\r\n    }\r\n  }\r\n  return parsedData;\r\n};\r\n\r\nmodule.exports = { chartPageParser };\r\n","let diagramPageParser = (controlPanel) => {\r\n  // сформируем данные для страницы круговой диаграммы\r\n  let sprintId = controlPanel.getCurrentSprintId();\r\n  let parsedData = {\r\n    alias: \"diagram\",\r\n    data: {\r\n      title: \"Размер коммитов\",\r\n      subtitle: `Спринт № ${sprintId}`,\r\n      totalText: \"\",\r\n      differenceText: \"\",\r\n      categories: [\r\n        { title: \"> 1001 строки\", valueText: \"\", differenceText: \"\" },\r\n        { title: \"501 — 1000 строк\", valueText: \"\", differenceText: \"\" },\r\n        { title: \"101 — 500 строк\", valueText: \"\", differenceText: \"\" },\r\n        { title: \"1 — 100 строк\", valueText: \"\", differenceText: \"\" },\r\n      ],\r\n    },\r\n  };\r\n\r\n  function countSizeOfCommitsOfSprint(controlPanel, sprintId) {\r\n    let summaries = controlPanel.getAllSummaries();\r\n    let commits = controlPanel.getSprintCommits(controlPanel.getSprintById(sprintId));\r\n    // [0: > 1001, 1: 501 - 1000, 2: 101 - 500, 3: 1 - 100]\r\n    let res = [0, 0, 0, 0];\r\n    commits.forEach((commit) => {\r\n      let size = 0;\r\n      commit.summaries.forEach((summary) => {\r\n        let summaryId = summary.id ?? summary;\r\n        size += summaries[summaryId].added + summaries[summaryId].removed;\r\n      });\r\n      if (size >= 1001) res[0]++;\r\n      else if (size >= 501) res[1]++;\r\n      else if (size >= 101) res[2]++;\r\n      else if (size >= 1) res[3]++;\r\n    });\r\n    return res;\r\n  }\r\n  let sum = (array) => array.reduce((prev, cur) => prev + cur);\r\n\r\n  let lastSizes = countSizeOfCommitsOfSprint(controlPanel, sprintId - 1);\r\n  let curSizes = countSizeOfCommitsOfSprint(controlPanel, sprintId);\r\n  parsedData.data.totalText = `${sum(curSizes)} коммита`;\r\n  let val = sum(curSizes) - sum(lastSizes);\r\n  parsedData.data.differenceText = `${val >= 0 ? \"+\" : \"\"}${val} с прошлого спринта`;\r\n\r\n  for (let i = 0; i < 4; i++) {\r\n    parsedData.data.categories[i].valueText = `${curSizes[i]} коммитов`;\r\n    let val = curSizes[i] - lastSizes[i];\r\n    parsedData.data.categories[i].differenceText = `${val >= 0 ? \"+\" : \"\"}${val} коммитов`;\r\n  }\r\n  return parsedData;\r\n};\r\n\r\nmodule.exports = { diagramPageParser };\r\n","let leadersPageParser = (controlPanel, commits) => {\r\n  // сформируем данные для страницы лидеров\r\n  let sprintId = controlPanel.getCurrentSprintId()\r\n  let parsedData = {\r\n    alias: \"leaders\",\r\n    data: {\r\n      title: \"Больше всего коммитов\",\r\n      subtitle: `Спринт № ${sprintId}`,\r\n      emoji: \"👑\",\r\n      users: [],\r\n    },\r\n  };\r\n\r\n  let users = controlPanel.getAllUsers();\r\n  let usersCommits = controlPanel.countUsersCommits(commits);\r\n  for (let userId in users) {\r\n    let x = { ...users[userId], valueText: usersCommits[userId] };\r\n    parsedData.data.users.push(x);\r\n  }\r\n  parsedData.data.users.sort((prev, cur) => cur.valueText - prev.valueText);\r\n  return parsedData;\r\n};\r\n\r\nmodule.exports = { leadersPageParser };\r\n","let votePageParser = (controlPanel, sprint) => {\r\n  // сформируем данные для страницы голосования\r\n  let sprintId = controlPanel.getCurrentSprintId();\r\n  let parsedData = {\r\n    alias: \"vote\",\r\n    data: {\r\n      title: \"Самый 🔎 внимательный разработчик\",\r\n      subtitle: `Спринт № ${sprintId}`,\r\n      emoji: \"🔎\",\r\n      users: [],\r\n    },\r\n  };\r\n\r\n  let users = controlPanel.getAllUsers();\r\n  let likesToUsersId = controlPanel.countLikesToCommentsByUsers(sprint);\r\n  for (let userId in likesToUsersId) {\r\n    let x = { ...users[userId], valueText: likesToUsersId[userId] };\r\n    parsedData.data.users.push(x);\r\n  }\r\n  parsedData.data.users.sort((prev, cur) => cur.valueText - prev.valueText);\r\n  parsedData.data.users = parsedData.data.users.map((user) => ({\r\n    ...user,\r\n    valueText: `${user.valueText} голосов`,\r\n  }));\r\n  return parsedData;\r\n};\r\n\r\nmodule.exports = { votePageParser };\r\n","let controlPanel = {\r\n  init: (entities, sprintId) => {\r\n    this.sprintId = sprintId;\r\n    // заглушка - если нужный спринт не найдется, то возвращается undefinedSprint\r\n    this.undefinedSprint = { startAt: -1, finishAt: -1 };\r\n    // сформировал обьект this.entities = { entityName: smth }\r\n    // User, Summary и Sprint хранятся в формате { entityId: Entity }\r\n    // остальные сущности хранятся в массивах Entity[]\r\n    this._entities = {\r\n      User: {},\r\n      Project: [],\r\n      Sprint: [],\r\n      Commit: [],\r\n      Summary: {},\r\n      Issue: [],\r\n      Comment: [],\r\n    };\r\n    entities.forEach((entity) => {\r\n      switch (entity.type) {\r\n        case \"User\":\r\n          this._entities.User[entity.id] = {\r\n            id: entity.id,\r\n            name: entity.name,\r\n            avatar: entity.avatar,\r\n            valueText: \"\",\r\n          };\r\n          break;\r\n        case \"Summary\":\r\n          this._entities.Summary[entity.id] = entity;\r\n          break;\r\n        case \"Sprint\":\r\n          this._entities.Sprint[entity.id] = entity;\r\n        default:\r\n          this._entities[entity.type].push(entity);\r\n          break;\r\n      }\r\n    });\r\n  },\r\n  getCurrentSprintId: () => this.sprintId,\r\n  getAllUsers: () => this._entities.User,\r\n  getAllSummaries: () => this._entities.Summary,\r\n  getSprintById: (sprintId) => {\r\n    // находит спринт по его id и если его нет, возвращаем заглушку\r\n    let sprints = this._entities.Sprint;\r\n    return sprints[sprintId] ?? this.undefinedSprint;\r\n  },\r\n  getSprintCommits: (sprint) => {\r\n    // находит все коммиты за спринт: Commit[]\r\n    let { startAt, finishAt } = sprint;\r\n    let commits = this._entities.Commit;\r\n    return commits.filter(\r\n      (commit) => startAt <= commit.timestamp && commit.timestamp <= finishAt\r\n    );\r\n  },\r\n  countUsersCommits: (commits) => {\r\n    // считает сколько юзеры сделали коммитов: {userId: countOfCommits}\r\n    let usersCommitsCount = {};\r\n    commits.forEach((commit) => {\r\n      let id = commit.author.id ?? commit.author;\r\n      if (id in usersCommitsCount) usersCommitsCount[id] += 1;\r\n      else usersCommitsCount[id] = 1;\r\n    });\r\n    return usersCommitsCount;\r\n  },\r\n  countLikesToCommentsByUsers: (sprint) => {\r\n    // считает лайки на комментарии юзеров: {userId: countOfLikesToComments}\r\n    let { startAt, finishAt } = sprint;\r\n    let comments = this._entities.Comment;\r\n    let likesToCommentsByUsers = {};\r\n    comments.forEach((comment) => {\r\n      if (startAt <= comment.createdAt && comment.createdAt <= finishAt) {\r\n        let id = comment.author.id ?? comment.author;\r\n        if (id in likesToCommentsByUsers)\r\n          likesToCommentsByUsers[id] += (comment.likes ?? []).length;\r\n        else likesToCommentsByUsers[id] = (comment.likes ?? []).length;\r\n      }\r\n    });\r\n    return likesToCommentsByUsers;\r\n  },\r\n};\r\n\r\nmodule.exports = { controlPanel };\r\n"]}